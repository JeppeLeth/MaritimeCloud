########################################
# MMS Configuration
########################################
# The MMS configuration
#
# The port and access log configuration can either be specified in a configuration file or
# using command line parameters.
# The security configuration must be specified via the configuration file.


########################################
# Port Configuration
########################################
# Used for specifying the ports used for unencrypted and TLS-encrypted REST and WebSocket communication.
#
# The "port" parameter specifies the unencrypted port and "secure-port" the TLS-encrypted port.
#
# Example:
#    port = 43234
#    secure-port = 43235


########################################
# Access Log Configuration
########################################
# The access log is used for logging the MMS communication.
#
# The "access-log" parameter specifies the file to write the MMS access logs to, or 'stdout' for standard out.
# The "access-log-format" is one of 'text', 'binary' and 'compact'.
#
# Example:
#    access-log = stdout
#    access-log-format = compact


########################################
# Security Configuration
########################################
# The security configuration is divided into different configuration groups.
#
# Each group defines a "handler-class" class, which must implement the BaseSecurityHandler interface.
# If the package name is "net.maritimecloud.mms.server.security.impl", it can be omitted from the "handler-class" value.

security-conf {

########################################
# Security -> SSL Configuration
########################################
# Used for specifying keystore and truststore information

ssl-conf {
# Example:
# The "DefaultSslHandler" handler allows you to specify the key-store to use for the server SSL certificate, and/or
# the trust-store to use for client certificates or intermediate CA certificate used for issuing client certificates.
#    handler-class = DefaultSslHandler
#    keystore = <<Path to keystore>>
#    keystore-password = <<Keystore password>>
#    truststore = <<Path to truststore>>
#    truststore-password = <<Truststore password>>
}


########################################
# Security -> Auth-Token Configuration
########################################
# Configuration of how the authentication token should be resolved.

auth-token-conf {
# Example 1:
# The "BasicAuthAuthenticationTokenHandler" will resolve the username-password token from the
# basic-authentication header of the websocket upgrade request.
#    handler-class = BasicAuthAuthenticationTokenHandler
#
# Example 2:
# The "ClientCertAuthenticationTokenHandler" will resolve a X.509 certificate token from the client certificate of
# the websocket upgrade request.
# If the "subject-dn-header" is set, then it is assumed that a proxy SSL-server
# has validated the client certificate and stamped the subject-DN in the given request header.
# If the "principal-rdn-attr" is set, then the given RDN attribute (e.g. "CN") will be extracted
# and used as the principal.
#    handler-class = ClientCertAuthenticationTokenHandler
#    subject-dn-header = <<Optionally, the subject-DN request header used by proxy SSL server>>
#    principal-rdn-attr = cn
#
# Example 3:
# The "JwtAuthenticationTokenHandler" will resolve and parse a signed JWT token from the "Authorization" upgrade
# request header. The header value should have the format "Bearer <JWT Token>" and the token must have been
# signed with the "jwt-secret" configuration parameter. The subject of the JWT token will be used as the
# authentication token principal.
#    handler-class=JwtAuthenticationTokenHandler
#    jwt-secret=Tordenskjold
#
# Example 4:
# The "FixedConfSecurityHandler" can more generally be used if a proxy SSL-server
# has handled the authentication and stamped the client principal into the request header
# defined by the "principal-header" attribute.
#    handler-class = FixedConfSecurityHandler
#    principal-header = <<The principal request header used by proxy SSL server>>
}


########################################
# Security -> Authentication Configuration
########################################
# Configuration of how to authenticate the client.

authentication-conf {
# Example 1:
# The "FixedConfSecurityHandler" will flag the client as authenticated if a principal has been resolved.
#    handler-class = FixedConfSecurityHandler
#
# Example 2:
# The "ApacheConfSecurityHandler" will authenticate a username-password authentication token using
# a credentials database stored in a Apache htpasswd-style file.
#    handler-class = ApacheConfSecurityHandler
#    htpasswd-file = <<Path to htpasswd file>>
#
# Example 3:
# The "LdapSecurityHandler" will flag the client as authenticated based on a search in LDAP.
# Either specify "user-bind-dn" to attempt to bind with the principal and credential of the current authentication
# token, or specify "user-search-dn", "user-search-credential" and "user-search-filter" in order to search for the user.
#    handler-class = LdapSecurityHandler
#    ldap-url = <<LDAP URL, e.g. "ldap://localhost:10389">>
#    user-bind-dn = <<[case 1] The user DN to bind as, incl principal substitution, e.g. "uid={0},ou=People,..." >>
#    user-search-bind-dn = <<[case 2] Search bind DN, e.g. "uid=admin,dc=maritimecloud,dc=net">>
#    user-search-credential = <<[case 2] Search bind DN password, e.g. "secret">>
#    user-search-base-dn = <<[case 2] DN subtree to search, e.g. "ou=People,dc=maritimecloud,dc=net">>
#    user-search-filter = <<[case 2] The user search filter, incl principal substitution, e.g. "(uid={0})" >>
}


########################################
# Security -> Client Verification Configuration
########################################
# Configuration of how to validate the client maritime ID against the authenticated principal.

client-verification-conf {
# Example 1:
# The "FixedConfSecurityHandler" will verify that the client ID is identical to the authenticated principal.
#    handler-class = FixedConfSecurityHandler
}

}
